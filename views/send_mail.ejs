<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- DevExtreme themes -->
        <!-- <link rel="stylesheet" href="\stylesheets\jodit.min.css"> -->
        <link rel="stylesheet" href="\stylesheets\jodit.css">
        
        <title>Document</title>
        <style>
            .m-b-20 {
                margin-bottom: 20px;
            }

            .m-b-10 {
                margin-bottom: 10px;
            }

            .file_index_ {
                width: 99%;
                padding: 5px;
                float: left;
                list-style: none;
            }

            .file_index_ > .file_name {
                width: 100%;
            }

            .file_index_ > .close {
                cursor: pointer;
            }

            #employees {
                max-height: 440px;
            }

            #bm_tree {
                max-height: 380px;
                min-height: 380px;
            }

            .dx-sortable-dragging {
                opacity: 0.9
            }

            .options {
                margin-top: 20px;
                padding: 20px;
                background-color: rgba(191, 191, 191, 0.15);
                position: relative;
            }

            .caption {
                font-size: 18px;
                font-weight: 500;
            }

            .option {
                margin-top: 10px;
                margin-right: 40px;
                display: inline-block;
            }

            .option:last-child {
                margin-right: 0;
            }
            
            /* 입력하는 부분의 크기에 따라 왼쪽이 내려가는 현상 있음 */
            .jodit-container {
                width: 100%;
                display: inline-block;
                position: relative;
                vertical-align: top;
                /* height: 200px !important; */
            }

            .jodit_fullsize {
                position: fixed !important;
                width: 100%;
            }

            .pagination-wrapper {
                width: 100%;
                position: relative; 
                float: left;
                margin: 0 auto;
                text-align: center;
            }

            ul {
                padding: 0;
                margin: 0;
                margin-top: 5px;
            }

            ul li {
                list-style-type: none;
                display: inline-block;
            }

            /* 페이지 버튼 */
            ul li button {
                width: 30px;    /* 페이징 방법 3개의 모든 버튼을 일정한 크기로 깔끔하게 보기 위해서 설정함. (실제로는 width를 설정하지 않음.) */
                border-radius: 4px;
                border-color: transparent;
                background-color: aliceblue;
                color: #337ab7;
                padding: 5px;
                margin-left: 2px;
                font-weight: bold;
            }

            /* 페이지 버튼에 마우스 올렸을 때 */
            ul li button:hover{
                
                background-color: #265a87;
                color: white;
            }

            /* 페이지 버튼 클릭했을 때 */
            ul li button:active{
                
                background-color: #193d5b;
                color: white;
            }

            /* p {
                margin: 0px;
            } */
        </style>
    </head>
    <body>
        <div class="m-b-10">
            <label>From</label>
            <input id="from" type="email" placeholder="보내는사람" value="post@yurim-info.com">
        </div>
        <div class="m-b-10">
            <label>To</label>
            <!-- <input id="to" type="email" placeholder="받는사람" value="yr.us.kim2@gmail.com"> -->
            <input id="to" type="email" placeholder="받는사람" value="minji_0801@naver.com">
        </div>
        <div class="m-b-10">
            <label>Cc</label>
            <!-- <input id="cc" type="email" placeholder="참조" value="unseob2@gmail.com"> -->
            <input id="cc" type="email" placeholder="참조" value="kimminji080122@gmail.com">
        </div>
        <div class="m-b-10">
            <label>Subject</label>
            <input id="subject" style="width: 90%;" placeholder="제목" value="테스트 이메일">
            <button onclick="SendMail()">전송</button>
        </div>
        <div id="file" class="m-b-10" id="dropFile" style="width: 100%; height: 120px; border: 1px solid black; overflow: scroll;">
            <!-- <span>File</span> -->
            <div id="thumbnails"></div>
        </div>
        <div id="editor"></div>
    </body>



        
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- <script type="text/javascript" src="/javascripts/jodit.min.js"></script> -->
    <script type="text/javascript" src="/javascripts/jodit.js"></script>

    <script>
        var attachFiles = [];
        
        $(function() {
            fileDropDown();
        });

        const editor = new Jodit('#editor',{
            // defaultMode: Jodit.MODE_SPLIT // html 태그 보이기
            // readonly: true , // 글 수정 금지 게시판 클릭 시 포함되어야 함
            // toolbarButtonSize: "small" // 툴바 크기 조정
            askBeforePasteHTML: false, // 붙여넣기 시 어떤 방식으로 넣을 지 선택 옵션 팝업 제거
            removeButtons: ["file", "image", "video"], // 삭제할 버튼들
            // toolbar: false,  // 위의 툴바 지우기
            // showCharsCounter: false,  //Char 카운트
            // showWordsCounter: false,  //글자 카운트
            // showXPathInStatusbar: false  //html 태그 표시
            minHeight: 650,  // 최소 길이
            maxHeight: 650,   // 최대 길이
            // minWidth: 500,   // 최소 너비
            // maxWidth: 900    // 최대 너비
            uploader: {
                "insertImageAsBase64URI": true
            },
            enter: "BR",
            //autofocus : true
        });

        
        function fileDropDown(){
            var dropZone = $("#file");  // 드롭존 지정
            //Drag기능 
            dropZone.on('dragenter',function(e){
                e.stopPropagation();
                e.preventDefault();
                // 드롭다운 영역 css
                dropZone.css('background-color','#E3F2FC');
            });
            dropZone.on('dragleave',function(e){
                e.stopPropagation();
                e.preventDefault();
                // 드롭다운 영역 css
                dropZone.css('background-color','#FFFFFF');
            });
            dropZone.on('dragover',function(e){
                e.stopPropagation();
                e.preventDefault();
                // 드롭다운 영역 css
                dropZone.css('background-color','#E3F2FC');
            });
            dropZone.on('drop',function(e){ // drop 이벤트가 발생한 시점
                e.preventDefault();
                // 드롭다운 영역 css
                dropZone.css('background-color','#FFFFFF');
                
                // files 로 가져오면 폴더도 같이 가져오게 됨
                // folder를 인식하는 방법 확인 필요
                // folder의 경우 type 값이 '' 로 들어오게 됨(빈칸)

                var files = e.originalEvent.dataTransfer.files; // drop한 FileList 객체(주의! FileList는 배열이 아닌 유사배열이다.)
                console.log(files);
                if(files != null){
                    if(files.length < 1){
                        //alert("폴더 업로드 불가");
                        //return;
                    } else {
                        var formData = new FormData();

                        for(var i=0; i<files.length; i++) {

                            var file = files[i];
                            var size = attachFiles.push(file);  // 첨부파일 목록에 추가
                            preview(file, size - 1);            // 미리보기 만들기

                            // type 으로 확인할 것


                            // 해당 파일을 어떻게 Ajax로 보낼것인지....
                            if(files[i].type != "") {
                                // 폴더가 아니면
                                formData.append('files', files[i]); // files 넣기

                                console.log('... file[' + i + '].name = ' + files[i].name + "... type : " + files[i].type);

                                // let today = new Date();   

                                // let year = today.getFullYear(); // 년도
                                // let month = today.getMonth() + 1;  // 월
                                // let date = today.getDate();  // 날짜
                                // let hour = today.getHours();  // 시
                                // let minute = today.getMinutes();  // 분
                                // let second = today.getSeconds();  // 초

                                // var fileName = files[i].name;

                                // //files[i].name = year + '' + month + '' + date + '' + hour + '' + minute + '' + second;

                                // console.log(files[i]);

                                console.log("Append Form");
                            } 
                            else {
                                // 폴더면
                                alert("impossible folder upload");
                                return;
                            }
                        }

                        formData.append("B_IDs", sessionStorage.getItem("_B_IDs"));     // B_IDs 값 넣기
                        formData.append("CR_IDs", sessionStorage.getItem("_CR_IDs"));   // CR_IDs 값 넣기
                        // B_IDs: 
                        // CR_IDs : sessionStorage.getItem("_CR_IDs"),

                        $.ajax({
                            url: '/api/fileUpload',
                            type: 'post',
                            data: formData,
                            //enctype:'multipart/form-data',
                            contentType: false,
                            processData: false,
                            dataType: 'json',
                            cache:false,
                            success: function(response){
                                //addThumbnail(response);

                                /* for(var i=0; i<response.files.length; i++) {
                                    socket.emit("File", {
                                        B_IDs: sessionStorage.getItem("_B_IDs"),
                                        CR_IDs : sessionStorage.getItem("_CR_IDs"),
                                        message : response.files[i].originalName,
                                        fileName : response.files[i].fileName
                                    });
                            
                                    onSend(response.files[i].originalName, "file", response.files[i].fileName );
                                } */

                                // uploadName 받아오기
                            }
                        });
                    }
                    //selectFile(files)
                } else {
                    alert("ERROR");
                }
            });
        }

        // 미리보기 만들기
        function preview(file, idx) {
            var reader = new FileReader();

            // FileReadr는 Blob 데이터를 Data URL로 바꿔줄 수 있다.
            // 이미지의 경로에 http URL이 아닌 이미지의 raw data를 base64로 인코딩한 문자열을 넣는다.

            // img src="' + e.target.result + '"

            reader.onload = (function(f, idx) {
                return function(e) {
                    var div = '<li class="file_index_"'+ idx +'>\
                               <span class="close" data-idx="' + idx + '">❌</span>\
                               <span class="file_name">' + f.name + '</span>\
                               </div>';
                    $("#thumbnails").append(div);
                };
            })(file, idx);
            reader.readAsDataURL(file);
        }

        // ❌ 클릭시 실행
        $("#thumbnails").on("click", ".close", function(e) {
            var $target = $(e.target);
            var idx = $target.attr('data-idx');
            attachFiles.splice(idx, 1); // 배열에서 삭제

            $target.parent().remove();  // 프리뷰 삭제
            console.log(attachFiles);
        });
        
        // 전송 버튼 클릭시 실행
        function SendMail() {
            //alert('');

            // 파일업로드는 2번째
            // var formData = {
            //     pFrom : $("#from").val(),       // 보낸 사람
            //     pTo : $("#to").val(),           // 받는 사람
            //     pCc : $("#cc").val(),           // 참조
            //     pSubject : $("#subject").val(), // 제목
            //     pHtmlText : editor.value        // 내용

            //     // 첨부파일도 담는다.
            // }

            var formData = new FormData();

            formData.append('pFrom', $("#from").val()); 
            formData.append('pTo', $("#to").val()); 
            formData.append('pCc', $("#cc").val()); 
            formData.append('pSubject', $("#subject").val()); 
            formData.append('pHtmlText', editor.value); 
            formData.append('pfiles', attachFiles); 

            // attachFiles 통째로 넣으면 들어가긴하지만 [object File] 로 들어간다..
            // fileUpload 부분의 files[i]는 그 내용이 보여지는데..
            // 다른 이유는 배열과 유사배열의 차이?
            // attachFiles 일반 배열이고 var files = e.originalEvent.dataTransfer.files 는 FileList 이라서 그런듯하다.

            // e.originalEvent.dataTransfer.files를 넣고 싶지만 유사배열이라 splice 메서드를 사용하지 못해서
            // ❌ 처리를 할 수 없다..
            
            console.log("attachFiles : ");
            console.log(attachFiles);
            
            $.each(attachFiles, function(i, file) {
                formData.append('pfilename', file.name); 
                var result = "";
                result += i + ' : ' + file.name;
                console.log(result);
            });

            // undefined 로 인식된다..
            /* for(var i=0; i<attachFiles.length; i++) {
                formData.append('pfiles', attachFiles[i]);
            } */ 

            $.ajax({
                type: 'POST',
                url: '/api/sendMail',
                data: formData,
                //  + '?page=' + pages + '&rowCount=' + rowcounts,
                dataType: "json",
                contentType: false, // content-type 헤더가 multipart/form-data로 전송되게함
                processData: false  // formData를 string으로 변환하지 않음
                ,success: function(respnse) {
                    //RefreshData();
                }
            });
        }
    
    </script>
</html>